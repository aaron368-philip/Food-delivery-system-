ALL CODE 

package food_delivery;

import javax.swing.*;
import java.awt.*;
import java.math.BigDecimal;

public class Food_Delivery extends JFrame {
    private JPanel mainPanel;
    private JButton addCustomerButton, placeOrderButton, checkOrderButton;
    
    public Food_Delivery() {
        setTitle("Food Delivery System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(3, 1, 10, 10));
        
        addCustomerButton = new JButton("Add Customer");
        placeOrderButton = new JButton("Place Order");
        checkOrderButton = new JButton("Check Order Status");

        addCustomerButton.addActionListener(e -> new AddCustomerGUI());
        placeOrderButton.addActionListener(e -> new PlaceOrderGUI());
        checkOrderButton.addActionListener(e -> new CheckOrderGUI());

        mainPanel.add(addCustomerButton);
        mainPanel.add(placeOrderButton);
        mainPanel.add(checkOrderButton);
        
        add(mainPanel);
        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Food_Delivery::new);
    }
}


package food_delivery;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class PlaceOrderGUI extends JFrame {

    private JComboBox<String> customerDropdown;
    private JComboBox<String> foodDropdown;
    private JTextArea cartArea;
    private JLabel totalAmountLabel;
    private JButton addToCartButton, placeOrderButton;
    private double totalAmount = 0.0;
    private Map<String, Integer> cartItems = new HashMap<>();

    public PlaceOrderGUI() {
        setTitle("Place Order");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(7, 2, 10, 10));

        add(new JLabel("Customer:"));
        List<String> customerList = DBHelper.getCustomerIdAndNames();

        if (customerList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No customers found. Please add customers first!");
            dispose();
            return;
        }

        customerDropdown = new JComboBox<>(customerList.toArray(new String[0]));
        add(customerDropdown);

        add(new JLabel("Select Food Item:"));
        List<String> foodMenu = DBHelper.getFoodMenu();

        if (foodMenu.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No food items available!");
            dispose();
            return;
        }

        foodDropdown = new JComboBox<>(foodMenu.toArray(new String[0]));
        add(foodDropdown);

        addToCartButton = new JButton("Add to Cart");
        add(addToCartButton);

        cartArea = new JTextArea(5, 20);
        cartArea.setEditable(false);
        add(new JScrollPane(cartArea));

        totalAmountLabel = new JLabel("Total Amount: ₹0.00");
        add(totalAmountLabel);

        placeOrderButton = new JButton("Place Order");
        add(placeOrderButton);

        // Add to Cart Functionality (Moved outside the place order listener)
        addToCartButton.addActionListener(event -> {
            String selectedItem = (String) foodDropdown.getSelectedItem();
            if (selectedItem == null) {
                return;
            }

            // Split the item string (e.g., "Pizza - ₹200") into name and price
            String[] parts = selectedItem.split(" - ₹");

            if (parts.length == 2) {
                try {
                    // Parse the price part (second part after "₹")
                    double price = Double.parseDouble(parts[1]);

                    // Add item to the cart
                    cartItems.put(selectedItem, cartItems.getOrDefault(selectedItem, 0) + 1);

                    totalAmount += price;
                    updateCartDisplay();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Invalid price format.");
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid item format.");
            }
        });

        // Place Order Functionality
        placeOrderButton.addActionListener(e -> {
            String selectedCustomer = (String) customerDropdown.getSelectedItem();
            if (selectedCustomer == null || cartItems.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select a customer and add items to the cart.");
                return;
            }

            int customerId = Integer.parseInt(selectedCustomer.split(" - ")[0]);

            List<String> items = new ArrayList<>(cartItems.keySet());
            List<Integer> quantities = new ArrayList<>(cartItems.values());

            int orderId = DBHelper.insertOrder(customerId, items, quantities, totalAmount);

            if (orderId != -1) {
                JOptionPane.showMessageDialog(this, "Order Placed Successfully!");
                new PaymentPage(orderId, totalAmount); // Passing Order ID and Total Amount
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Order placement failed.");
            }
        });

        setVisible(true);
    }

    private void updateCartDisplay() {
    StringBuilder cartText = new StringBuilder("Items in Cart:\n");
    for (Map.Entry<String, Integer> entry : cartItems.entrySet()) {
        cartText.append(entry.getKey()).append(" x").append(entry.getValue()).append("\n");
    }
    cartArea.setText(cartText.toString());
    totalAmountLabel.setText(String.format("Total Amount: ₹%.2f", totalAmount)); // Format properly
}

}
package food_delivery;

import javax.swing.*;
import java.awt.*;

public class AddCustomerGUI extends JFrame {
    private JTextField nameField, mobileField, addressField;
    private JButton submitButton;
    
    public AddCustomerGUI() {
        setTitle("Add Customer");
        setSize(300, 250);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));

        panel.add(new JLabel("Name:"));
        nameField = new JTextField();
        panel.add(nameField);

        panel.add(new JLabel("Mobile:"));
        mobileField = new JTextField();
        panel.add(mobileField);

        panel.add(new JLabel("Address:"));
        addressField = new JTextField();
        panel.add(addressField);

        submitButton = new JButton("Add Customer");
        submitButton.addActionListener(e -> {
            String name = nameField.getText();
            String mobile = mobileField.getText();
            String address = addressField.getText();
            DBHelper.insertCustomer(name, mobile, address);
            JOptionPane.showMessageDialog(this, "Customer Added!");
            dispose();
        });

        panel.add(submitButton);
        add(panel);
        setVisible(true);
    }
}


package food_delivery;

import javax.swing.*;
import java.awt.*;

public class CheckOrderGUI extends JFrame {
    private JTextField orderIdField;
    private JTextArea resultArea;
    private JButton submitButton;

    public CheckOrderGUI() {
        setTitle("Check Order Status");
        setSize(350, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(2, 2, 10, 10));
        inputPanel.add(new JLabel("Order ID:"));
        orderIdField = new JTextField();
        inputPanel.add(orderIdField);

        submitButton = new JButton("Check Status");
        submitButton.addActionListener(e -> {
            int orderId = Integer.parseInt(orderIdField.getText());
            resultArea.setText(DBHelper.getOrderDetails(orderId));
        });

        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(submitButton, BorderLayout.CENTER);

        resultArea = new JTextArea();
        resultArea.setEditable(false);
        panel.add(new JScrollPane(resultArea), BorderLayout.SOUTH);

        add(panel);
        setVisible(true);
    }
}


package food_delivery;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DBHelper {
    private static final String URL = "jdbc:oracle:thin:@localhost:1521:xe"; 
    private static final String USER = "system"; 
    private static final String PASSWORD = "root"; 

    public static Connection connect() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // Insert Customer
    public static int insertCustomer(String name, String mobile, String address) {
        String checkQuery = "SELECT CUSTOMER_ID FROM CUSTOMER WHERE MOBILE = ?";
        String insertQuery = "INSERT INTO CUSTOMER (NAME, MOBILE, ADDRESS) VALUES (?, ?, ?) RETURNING CUSTOMER_ID INTO ?";

        try (Connection conn = connect();
             PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
             CallableStatement insertStmt = conn.prepareCall("BEGIN " + insertQuery + "; END;")) {

            // Check if customer already exists
            checkStmt.setString(1, mobile);
            ResultSet rs = checkStmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("CUSTOMER_ID");
            }

            // Insert new customer
            insertStmt.setString(1, name);
            insertStmt.setString(2, mobile);
            insertStmt.setString(3, address);
            insertStmt.registerOutParameter(4, Types.NUMERIC);

            insertStmt.execute();
            return insertStmt.getInt(4);

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(" Error inserting customer: " + e.getMessage());
        }
        return -1;
    }

    //  Insert Order (Fixed)
   //  New Insert Order method matching PlaceOrderGUI's call
public static int insertOrder(int customerId, List<String> items, List<Integer> quantities, double totalAmount) {
    String getCustomerNameQuery = "SELECT NAME FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    String insertOrderQuery = "INSERT INTO ORDERS (CUSTOMER_ID, CUSTOMER_NAME, TOTAL_AMOUNT, STATUS) VALUES (?, ?, ?, ?) RETURNING ORDER_ID INTO ?";
    String insertItemsQuery = "INSERT INTO ORDER_ITEMS (ORDER_ID, FOOD_NAME, QUANTITY) VALUES (?, ?, ?)";

    String customerName = null;

    try (Connection conn = connect();
         PreparedStatement nameStmt = conn.prepareStatement(getCustomerNameQuery)) {

        // Fetch customer name
        nameStmt.setInt(1, customerId);
        ResultSet rs = nameStmt.executeQuery();
        if (rs.next()) {
            customerName = rs.getString("NAME");
        } else {
            System.out.println("Customer not found!");
            return -1; // Invalid customer ID
        }

        // Insert order
        try (CallableStatement orderStmt = conn.prepareCall("BEGIN " + insertOrderQuery + "; END;")) {
            orderStmt.setInt(1, customerId);
            orderStmt.setString(2, customerName);
            orderStmt.setDouble(3, totalAmount);
            orderStmt.setString(4, "Pending");
            orderStmt.registerOutParameter(5, Types.NUMERIC);
            orderStmt.execute();

            int orderId = orderStmt.getInt(5);

            // Insert order items
            try (PreparedStatement itemStmt = conn.prepareStatement(insertItemsQuery)) {
                for (int i = 0; i < items.size(); i++) {
                    itemStmt.setInt(1, orderId);
                    itemStmt.setString(2, items.get(i));
                    itemStmt.setInt(3, quantities.get(i));
                    itemStmt.addBatch();
                }
                itemStmt.executeBatch();
            }

            System.out.println(" Order Placed! ORDER_ID: " + orderId);
            return orderId;

        } catch (SQLException e) {
            System.out.println(" Error inserting order: " + e.getMessage());
        }

    } catch (SQLException e) {
        System.out.println(" Error fetching customer name: " + e.getMessage());
    }

    return -1; // Failure case
}



    // Get Random Agent (Helper Method)
    private static int getRandomAgentId(Connection conn) throws SQLException {
        String query = "SELECT AGENT_ID FROM DELIVERY_AGENT ORDER BY DBMS_RANDOM.VALUE FETCH FIRST 1 ROWS ONLY";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("AGENT_ID");
            }
        }
        return -1; // Return -1 if no agent is found
    }

    //  Get Order Details (Fixed Column Names)
    public static String getOrderDetails(int orderId) {
        String sql = "SELECT C.NAME AS CUSTOMER_NAME, O.TOTAL_AMOUNT, D.AGENT_NAME, D.AGENT_MOBILE, O.STATUS " +
                     "FROM ORDERS O " +
                     "JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID " +
                     "JOIN DELIVERY_AGENT D ON O.AGENT_ID = D.AGENT_ID " +
                     "WHERE O.ORDER_ID = ?";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, orderId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String customerName = rs.getString("CUSTOMER_NAME");
                double totalAmount = rs.getDouble("TOTAL_AMOUNT");
                String agentName = rs.getString("AGENT_NAME");
                String agentMobile = rs.getString("AGENT_MOBILE");
                String orderStatus = rs.getString("STATUS");

                return "Customer: " + customerName + "\n" +
                       "Total Amount: ₹" + totalAmount + "\n" +
                       "Delivery Agent: " + agentName + "\n" +
                       "Agent Contact: " + agentMobile + "\n" +
                       "Order Status: " + orderStatus;
            } else {
                return " Order not found! Please check your Order ID.";
            }

        } catch (SQLException e) {
            return " Error fetching order details: " + e.getMessage();
        }
    }

    //  Get Food Menu
    public static List<String> getFoodMenu() {
        List<String> foodMenu = new ArrayList<>();
        String sql = "SELECT FOOD_NAME, PRICE FROM FOOD_MENU";

        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                String item = rs.getString("FOOD_NAME") + " - ₹" + rs.getDouble("PRICE");
                foodMenu.add(item);
            }

            if (foodMenu.isEmpty()) {
                System.out.println("⚠ No food items found!");
            }
        } catch (SQLException e) {
            System.out.println("Error fetching food menu: " + e.getMessage());
        }
        return foodMenu;
    }
}


package food_delivery;

import javax.swing.*;
import java.awt.*;

public class MainPage extends JFrame {
    public MainPage() {
        setTitle("Food Delivery System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(3, 1, 10, 10));

        JLabel welcomeLabel = new JLabel("Welcome to Food Delivery", SwingConstants.CENTER);
        add(welcomeLabel);

        JButton placeOrderButton = new JButton("Place Order");
        placeOrderButton.addActionListener(e -> new PlaceOrderGUI()); // Assuming PlaceOrderPage exists
        add(placeOrderButton);

        JButton checkStatusButton = new JButton("Check Order Status");
        checkStatusButton.addActionListener(e -> new CheckOrderGUI()); // Assuming CheckOrderStatusPage exists
        add(checkStatusButton);

        setVisible(true);
    }

    public static void main(String[] args) {
        new MainPage();
    }
}



package food_delivery;

import javax.swing.*;
import java.awt.*;

public class PaymentPage extends JFrame {
    private JRadioButton codButton;
    private JButton confirmPaymentButton;
    private int orderId;
    private double totalAmount;

    public PaymentPage(int orderId, double totalAmount) {
        this.orderId = orderId;
        this.totalAmount = totalAmount;

        setTitle("Payment");
        setSize(300, 250);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(4, 1, 10, 10));

        JLabel titleLabel = new JLabel("Select Payment Method", SwingConstants.CENTER);
        add(titleLabel);

        codButton = new JRadioButton("Cash on Delivery");
        codButton.setSelected(true);
        add(codButton);

        JLabel amountLabel = new JLabel("Total Amount: ₹" + totalAmount, SwingConstants.CENTER);
        add(amountLabel);

        confirmPaymentButton = new JButton("Confirm Payment");
        add(confirmPaymentButton);

        confirmPaymentButton.addActionListener(e -> {
            if (codButton.isSelected()) {
                JOptionPane.showMessageDialog(this, "Payment Confirmed!\nYour Order ID: " + orderId);
                dispose();
                new MainPage().setVisible(true); // Make sure MainPage is visible
            }
        });

        setVisible(true);
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package food_delivery;

import javax.swing.*;
import java.awt.*;

public class LoginGUI extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;

    public LoginGUI() {
        setTitle("Login");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(3, 2, 10, 10));

        add(new JLabel("Username:"));
        usernameField = new JTextField();
        add(usernameField);

        add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        add(passwordField);

        loginButton = new JButton("Login");
        add(loginButton);

        loginButton.addActionListener(e -> authenticateUser());

        setVisible(true);
    }

    private void authenticateUser() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());

        if (DBHelper.authenticateUser(username, password)) {
            JOptionPane.showMessageDialog(this, "Login Successful!");
            new ChangeOrderStatusGUI();  // Open order status update GUI
            dispose(); // Close login window
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Credentials. Try again.", "Login Failed", JOptionPane.ERROR_MESSAGE);
        }
    }
}


package food_delivery;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class ChangeOrderStatusGUI extends JFrame {
    private JTextField orderIdField;
    private JComboBox<String> statusDropdown;
    private JButton updateButton;

    public ChangeOrderStatusGUI() {
        setTitle("Update Order Status");
        setSize(350, 200);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(3, 2, 10, 10));

        add(new JLabel("Order ID:"));
        orderIdField = new JTextField();
        add(orderIdField);

        add(new JLabel("New Status:"));
        String[] statuses = {"Pending", "Out for Delivery", "Delivered"};
        statusDropdown = new JComboBox<>(statuses);
        add(statusDropdown);

        updateButton = new JButton("Update Status");
        add(updateButton);

        updateButton.addActionListener(e -> updateOrderStatus());

        setVisible(true);
    }

    private void updateOrderStatus() {
        int orderId;
        try {
            orderId = Integer.parseInt(orderIdField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Order ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String newStatus = (String) statusDropdown.getSelectedItem();

        if (DBHelper.updateOrderStatus(orderId, newStatus)) {
            JOptionPane.showMessageDialog(this, "Order Status Updated Successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to Update Order Status!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}


these are all the table structure

 desc orders;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 ORDER_ID                                  NOT NULL NUMBER
 CUSTOMER_ID                               NOT NULL NUMBER
 ITEM_NAME                                 NOT NULL VARCHAR2(100)
 QUANTITY                                  NOT NULL NUMBER
 TOTAL_AMOUNT                              NOT NULL NUMBER(10,2)
 AGENT_NAME                                         VARCHAR2(100)
 AGENT_MOBILE                                       VARCHAR2(15)
 ORDER_STATUS                                       VARCHAR2(50)
 AGENT_ID                                           NUMBER
 CUSTOMER_NAME                                      VARCHAR2(100)

SQL> desc customer;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 CUSTOMER_ID                               NOT NULL NUMBER
 NAME                                      NOT NULL VARCHAR2(100)
 MOBILE                                    NOT NULL VARCHAR2(15)
 ADDRESS                                   NOT NULL VARCHAR2(255)

SQL> desc delivery_agent;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 AGENT_ID                                  NOT NULL NUMBER
 AGENT_NAME                                NOT NULL VARCHAR2(100)
 AGENT_MOBILE                              NOT NULL VARCHAR2(15)

SQL> desc food_menu;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 FOOD_ID                                   NOT NULL NUMBER(38)
 FOOD_NAME                                 NOT NULL VARCHAR2(100)
 FOOD_TYPE                                          VARCHAR2(50)
 PRICE                                     NOT NULL NUMBER(10,2)

SQL> desc order_items;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 ITEM_ID                                   NOT NULL NUMBER
 ORDER_ID                                  NOT NULL NUMBER
 ITEM_NAME                                 NOT NULL VARCHAR2(100)
 QUANTITY                                  NOT NULL NUMBER

desc users;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 USER_ID                                   NOT NULL NUMBER
 USERNAME                                  NOT NULL VARCHAR2(50)
 PASSWORD                                  NOT NULL VARCHAR2(255)
 ROLE                                      NOT NULL VARCHAR2(20)

